{"version":3,"sources":["Todoform.js","TodoItem.js","TodoList.js","Todoheader.js","App.js","serviceWorker.js","index.js"],"names":["Todoform","state","title","onChange","e","setState","target","value","onSubmit","preventDefault","props","addTodo","Container","fixed","this","style","margin","TextField","id","label","required","Fab","color","aria-label","type","React","Component","TodoItem","getstyle","textDecoration","completed","class","Checkbox","checked","markCompleted","bind","IconButton","onClick","delTodo","TodoList","todos","map","todo","key","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","Todoheader","classes","className","AppBar","position","Toolbar","variant","edge","Typography","App","filter","newtodo","newTodo","Math","floor","random","trim","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97587d87.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nclass Todoform extends React.Component{\r\n\r\n    state = {\r\n        title :''\r\n    }\r\n\r\n    //fetching input value\r\n    onChange = (e) => {\r\n       this.setState({title : e.target.value});\r\n\r\n    }\r\n\r\n    //on submit calling addtodo \r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title : \"\"});\r\n    }\r\n    render(){\r\n        return (\r\n            <Container fixed>\r\n\r\n            <form onSubmit = {this.onSubmit} style={{margin : '20px'}}>\r\n\r\n                <TextField id=\"standard-basic\" label=\"Add Todo\"\r\n                value = {this.state.title}\r\n                onChange={this.onChange} required\r\n               />\r\n               \r\n              <Fab color=\"primary\" aria-label=\"add\" type=\"submit\">\r\n                 <AddIcon  />\r\n             </Fab>\r\n               \r\n            </form>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\nexport default Todoform;","import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\n\r\n\r\n\r\nclass TodoItem extends React.Component{\r\n    //cancel the todo if completed is true\r\n    getstyle = () =>{\r\n        return {\r\n           \r\n            textDecoration : this.props.completed ? 'line-through':'none',\r\n           \r\n        }\r\n    }\r\n  \r\n  \r\n    render(){\r\n        return (\r\n            \r\n         <div style = {this.getstyle() } class=\"Item\">\r\n\r\n        <Checkbox checked= {this.props.completed} \r\n            onChange = {this.props.markCompleted.bind\r\n                (this,this.props.id)}\r\n         />\r\n               \r\n         \r\n               <span> {this.props.title}</span> \r\n             <IconButton aria-label=\"delete\" onClick ={this.props.delTodo.bind\r\n                    (this,this.props.id)}  class = \"btnstyle\">\r\n                 <DeleteIcon />\r\n             </IconButton>\r\n                    \r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nclass TodoList extends React.Component{\r\n  \r\n    render(){\r\n        return this.props.todos.map((todo) => (\r\n        <TodoItem \r\n        key={todo.id}\r\n        title = {todo.title} \r\n        completed = {todo.completed}\r\n        markCompleted = {this.props.markCompleted} \r\n        delTodo = {this.props.delTodo}\r\n        id = {todo.id} />\r\n        ));\r\n    }\r\n}\r\nexport default TodoList;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function Todoheader() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\">\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n           Todo List App\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport TodoForm from './Todoform';\nimport TodoList from './TodoList';\nimport Todoheader from './Todoheader';\nimport Container from '@material-ui/core/Container';\n\nimport './App.css';\n \n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\n    //todos containing pre defined todos\n    this.state = {\n      todos : [\n        {\n          id:1,\n          title:\"learn react\",\n          completed:false\n        },\n        {\n          id:2,\n          title:\"learn .net\",\n          completed:true\n        },\n        {\n          id:3,\n          title:\"learn crm\",\n          completed:false\n        }\n      ]\n    }\n  }\n  \n\n  //change completed state based on check event \n  \n  markCompleted = (id) => {\n    this.setState({\n      todos : this.state.todos.map(todo => \n        {\n          if(todo.id === id){\n            todo.completed = !todo.completed;\n\n          }\n          return todo;\n        })\n    });\n  \n  }\n\n  //delete todo object on click of delete button\n  delTodo = (id) => {\n    this.setState({\n      todos : [...this.state.todos.filter(todo => \n        todo.id !== id)]\n    });\n  }\n\n\n\n  //add todo item to todos from form \n  addTodo = (title) =>{\n  const newtodo = new newTodo(Math.floor(Math.random() * 100),title);\n  if(newtodo.title.trim()!==\"\"){\n    this.setState({\n   todos : [...this.state.todos , newtodo]\n });\n  }\n  \n  \n  }\n  \n render (){\n   return(\n    <Container fixed>\n   <div class=\"App\">\n     <center>\n       <Todoheader/>\n    <TodoForm addTodo = {this.addTodo}/>\n    <TodoList todos={this.state.todos} markCompleted = {this.markCompleted} delTodo = {this.delTodo}/>\n    </center>\n   </div>\n   </Container>\n    );\n   }\n}\n\n\n//class to create todo object\nclass newTodo{\n  constructor(id,title,completed=false){\n    this.id=id\n    this.title = title\n    this.completed = completed\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}